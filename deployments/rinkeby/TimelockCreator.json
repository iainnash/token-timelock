{
  "address": "0x8091734f77CDe5f44C3d68Ef103FC7D11Bfe2Ffe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Timelock",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CreatedTimelockContract",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payoutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "recoverTimestamp",
          "type": "uint256"
        }
      ],
      "name": "createTimelock",
      "outputs": [
        {
          "internalType": "contract Timelock",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf4978d9eb1f5ba518309a7e06591886d71a252434fcb573d4aa18a5df3d8fe8",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0x8091734f77CDe5f44C3d68Ef103FC7D11Bfe2Ffe",
    "transactionIndex": 34,
    "gasUsed": "1246944",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xde7ab8c0668745d89e4fbb868236935472799c1066d5642cc6f511277cb46198",
    "transactionHash": "0xaf4978d9eb1f5ba518309a7e06591886d71a252434fcb573d4aa18a5df3d8fe8",
    "logs": [],
    "blockNumber": 9148930,
    "cumulativeGasUsed": "7245973",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "91557b3b6ee946fce6ea43e644082370",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Timelock\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CreatedTimelockContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverTimestamp\",\"type\":\"uint256\"}],\"name\":\"createTimelock\",\"outputs\":[{\"internalType\":\"contract Timelock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Factory contract that creates a timelock given global timelock parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimelockCreator.sol\":\"TimelockCreator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/Timelock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n  Timelock contract.\\n  Fixed token payout and timing.\\n  Can add recipients and multiple grants per recipient.\\n\\n  @author iain\\n  github.com/iainnash/simple-timelock\\n */\\ncontract Timelock {\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\n    /**\\n        Error codes lookup:\\n        1: Recover and recieve grant days need to be greater than 0\\n        2: Grant not valid.\\n        3: Only owner can add grants.\\n        4: Only owner can recover\\n        5: Cannot set the recovery grant before the unlock time\\n        6: Too early to recover\\n        7: Too early to claim\\n        8: Recover timestamp needs to be after receive timestamp\\n        9: Already granted\\n        10: Cannot grant after unlock\\n        11: Token not approved or not enough\\n        12: Invalid ownership\\n    */\\n\\n    // Token amount to grant to each user\\n    uint256 private immutable tokenAmount;\\n    // Timestamp for when the recovery begins\\n    uint256 public immutable timeRecoverGrant;\\n    // Timestamp for when the receive begins\\n    uint256 public immutable timeReceiveGrant;\\n    // Owner that can recover grant and add new grant addresses\\n    address private immutable owner;\\n    // Token to lock\\n    IERC20 private immutable token;\\n\\n    // Status of grant\\n    enum GrantStatus {\\n        // No grant setup for user\\n        UNKNOWN,\\n        // Granted to user\\n        GRANTED,\\n        // Claimed by user\\n        CLAIMED\\n    }\\n\\n    // Mapping of address to grant\\n    mapping(address => GrantStatus) private grants;\\n\\n    // Emitted when a claim is recovered\\n    event Recovered(address recipient, uint256 amount);\\n\\n    // Emitted when a claim is claimed\\n    event Claimed(address actor, uint256 amount);\\n\\n    // Emitted when a grant is added\\n    event GrantsAdded(address actor, address[] newRecipients);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"3\\\");\\n        _;\\n    }\\n\\n    /**\\n        Sets up grant created by TimelockCreator Contract\\n     */\\n    constructor(\\n        address _owner,\\n        IERC20 _token,\\n        uint256 _tokenAmount,\\n        uint256 unlockTimestamp,\\n        uint256 recoverTimestamp\\n    ) {\\n        token = _token;\\n        owner = _owner;\\n        tokenAmount = _tokenAmount;\\n        require(\\n            unlockTimestamp > block.timestamp &&\\n                recoverTimestamp > block.timestamp,\\n            \\\"1\\\"\\n        );\\n        require(recoverTimestamp > unlockTimestamp, \\\"8\\\");\\n        timeReceiveGrant = unlockTimestamp;\\n        timeRecoverGrant = recoverTimestamp;\\n    }\\n\\n    /**\\n        Returns token for timelock and amount per recipient\\n     */\\n    function getTokenAndAmount() public view returns (IERC20, uint256) {\\n        return (token, tokenAmount);\\n    }\\n\\n    /** \\n        Returns the time users can recieve the grant / when the timelock expires\\n     */\\n    function getTimeUnlock() public view returns (uint256) {\\n        return timeReceiveGrant;\\n    }\\n\\n    function balanceOf(address user) public view returns (uint256) {\\n        return grants[user] == GrantStatus.GRANTED ? tokenAmount : 0;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return IERC20Metadata(address(token)).decimals();\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"Timelocked \\\",\\n                    IERC20Metadata(address(token)).name()\\n                )\\n            );\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"LOCKED_\\\",\\n                    IERC20Metadata(address(token)).symbol()\\n                )\\n            );\\n    }\\n\\n    /** \\n        @dev Adds a grant to the timelock\\n        Grants can be added at any time before claim period.\\n    */\\n    function addGrants(address[] memory newRecipients) external onlyOwner {\\n        require(getTimeUnlock() > block.timestamp, \\\"10\\\");\\n        require(\\n            token.allowance(msg.sender, address(this)) >=\\n                newRecipients.length * tokenAmount,\\n            \\\"11\\\"\\n        );\\n\\n        uint256 numberRecipients = newRecipients.length;\\n        token.transferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenAmount * numberRecipients\\n        );\\n        for (uint256 i = 0; i < numberRecipients; i++) {\\n            emit Transfer(address(0), newRecipients[i], tokenAmount);\\n            require(grants[newRecipients[i]] == GrantStatus.UNKNOWN, \\\"9\\\");\\n            grants[newRecipients[i]] = GrantStatus.GRANTED;\\n        }\\n        emit GrantsAdded(owner, newRecipients);\\n    }\\n\\n    /** \\n        Returns the status of the grant.\\n     */\\n    function grantStatus(address recipient)\\n        external\\n        view\\n        returns (GrantStatus)\\n    {\\n        return grants[recipient];\\n    }\\n\\n    /**\\n        Allows a user to claim their grant. Claimee has to be msg.sender.\\n     */\\n    function claim() external {\\n        address recipient = msg.sender;\\n        require(block.timestamp >= timeReceiveGrant, \\\"7\\\");\\n        require(grants[recipient] == GrantStatus.GRANTED, \\\"2\\\");\\n        token.transfer(recipient, tokenAmount);\\n        grants[recipient] = GrantStatus.CLAIMED;\\n        emit Claimed(recipient, tokenAmount);\\n        emit Transfer(recipient, address(0x0), tokenAmount);\\n    }\\n\\n    /**\\n        The owner of the grant can recover after the recovery timestamp passes.\\n        This sweeps remaining funds and destroys the contract data.\\n     */\\n    function recover() external onlyOwner {\\n        address payable sender = payable(msg.sender);\\n        require(block.timestamp >= timeRecoverGrant, \\\"6\\\");\\n        uint256 balance = token.balanceOf(address(this));\\n        emit Recovered(sender, balance);\\n        token.transfer(sender, balance);\\n        selfdestruct(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe483cee70de96501b6476dc06e7598577b0074a0d338b8e70a459b8c7efde04d\",\"license\":\"GPL-3.0\"},\"contracts/TimelockCreator.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nimport \\\"./Timelock.sol\\\";\\n\\n/**\\nFactory contract that creates a timelock given global timelock parameters.\\n*/\\ncontract TimelockCreator {\\n    event CreatedTimelockContract(\\n        address indexed,\\n        Timelock indexed,\\n        uint256,\\n        uint256,\\n        uint256\\n    );\\n\\n    function createTimelock(\\n        address owner,\\n        IERC20 token,\\n        uint256 payoutAmount,\\n        uint256 unlockTimestamp,\\n        uint256 recoverTimestamp\\n    ) external returns (Timelock) {\\n        Timelock response = new Timelock(\\n            owner,\\n            token,\\n            payoutAmount,\\n            unlockTimestamp,\\n            recoverTimestamp\\n        );\\n        emit CreatedTimelockContract(\\n            owner,\\n            response,\\n            payoutAmount,\\n            unlockTimestamp,\\n            recoverTimestamp\\n        );\\n        return response;\\n    }\\n}\\n\",\"keccak256\":\"0x76d57dbe57cdadbcb70ab32e16696818f23e33d52fcc2459bfa20c25592a6dad\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636acaa16e14610030575b600080fd5b61004361003e366004610126565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b600080868686868660405161007390610119565b6001600160a01b03958616815294909316602085015260408401919091526060830152608082015260a001604051809103906000f0801580156100ba573d6000803e3d6000fd5b5060408051878152602081018790529081018590529091506001600160a01b0380831691908916907f4b4ae6657115b65541e2282bdb779afb0c0554f3165ee123656b52053a8312f29060600160405180910390a39695505050505050565b6114038061019083390190565b600080600080600060a0868803121561013e57600080fd5b853561014981610177565b9450602086013561015981610177565b94979496505050506040830135926060810135926080909101359150565b6001600160a01b038116811461018c57600080fd5b5056fe6101206040523480156200001257600080fd5b5060405162001403380380620014038339810160408190526200003591620000e2565b6001600160601b0319606085811b82166101005286901b1660e052608083905242821180156200006457504281115b6200009a5760405162461bcd60e51b81526020600482015260016024820152603160f81b60448201526064015b60405180910390fd5b818111620000cf5760405162461bcd60e51b81526020600482015260016024820152600760fb1b604482015260640162000091565b60c09190915260a0525062000153915050565b600080600080600060a08688031215620000fb57600080fd5b855162000108816200013a565b60208701519095506200011b816200013a565b6040870151606088015160809098015196999198509695945092505050565b6001600160a01b03811681146200015057600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6111d262000231600039600081816101320152818161024c015281816103070152818161049a0152818161065e015281816107ca015281816108b701528181610a380152610af901526000818161070c0152818161094b0152610d720152600081816101ea015281816102130152818161039e015261099f0152600081816101c6015261076001526000818161015601528181610474015281816105430152818161059601528181610634015281816109f201528181610b260152610c2e01526111d26000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063be04e3d511610071578063be04e3d514610180578063ce746024146101b9578063dc5f31e0146101c1578063def1e7ae146101e8578063e3e3acdf1461020e578063fdb807741461023557600080fd5b806306fdde03146100b9578063313ce567146100d75780634e71d92d146100f157806370a08231146100fb57806395d89b411461011c578063ac91965f14610124575b600080fd5b6100c1610248565b6040516100ce9190611076565b60405180910390f35b6100df610303565b60405160ff90911681526020016100ce565b6100f961039b565b005b61010e610109366004610dc8565b6105f5565b6040519081526020016100ce565b6100c161065a565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681527f00000000000000000000000000000000000000000000000000000000000000006020820152016100ce565b6101ac61018e366004610dc8565b6001600160a01b031660009081526020819052604090205460ff1690565b6040516100ce919061104e565b6100f9610701565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000061010e565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b6100f9610243366004610dea565b610940565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156102a357600080fd5b505afa1580156102b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102df9190810190610ec0565b6040516020016102ef9190610fbf565b604051602081830303815290604052905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561035e57600080fd5b505afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190610f6d565b905090565b337f00000000000000000000000000000000000000000000000000000000000000004210156103f55760405162461bcd60e51b81526020600482015260016024820152603760f81b60448201526064015b60405180910390fd5b60016001600160a01b03821660009081526020819052604090205460ff1660028111156104245761042461115a565b146104555760405162461bcd60e51b81526020600482015260016024820152601960f91b60448201526064016103ec565b60405163a9059cbb60e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190610e9e565b506001600160a01b03811660008181526020818152604091829020805460ff1916600217905581519283527f0000000000000000000000000000000000000000000000000000000000000000908301527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a16040517f000000000000000000000000000000000000000000000000000000000000000081526000906001600160a01b038316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350565b600060016001600160a01b03831660009081526020819052604090205460ff1660028111156106265761062661115a565b14610632576000610654565b7f00000000000000000000000000000000000000000000000000000000000000005b92915050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f19190810190610ec0565b6040516020016102ef9190610f90565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461075d5760405162461bcd60e51b81526020600482015260016024820152603360f81b60448201526064016103ec565b337f00000000000000000000000000000000000000000000000000000000000000004210156107b25760405162461bcd60e51b81526020600482015260016024820152601b60f91b60448201526064016103ec565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190610f54565b604080516001600160a01b0385168152602081018390529192507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a160405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190610e9e565b50816001600160a01b0316ff5b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461099c5760405162461bcd60e51b81526020600482015260016024820152603360f81b60448201526064016103ec565b427f0000000000000000000000000000000000000000000000000000000000000000116109f05760405162461bcd60e51b8152602060048201526002602482015261031360f41b60448201526064016103ec565b7f00000000000000000000000000000000000000000000000000000000000000008151610a1d91906110da565b604051636eb1769f60e11b81523360048201523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610a8257600080fd5b505afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190610f54565b1015610aed5760405162461bcd60e51b8152602060048201526002602482015261313160f01b60448201526064016103ec565b80516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd3330610b4a857f00000000000000000000000000000000000000000000000000000000000000006110da565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd19190610e9e565b5060005b81811015610d4e57828181518110610bef57610bef611170565b60200260200101516001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef7f0000000000000000000000000000000000000000000000000000000000000000604051610c5c91815260200190565b60405180910390a360008080858481518110610c7a57610c7a611170565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166002811115610cb257610cb261115a565b14610ce35760405162461bcd60e51b81526020600482015260016024820152603960f81b60448201526064016103ec565b6001600080858481518110610cfa57610cfa611170565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115610d3757610d3761115a565b021790555080610d4681611129565b915050610bd5565b507fa0cd582431bf0ccaa00246b434e59ebd5f63aa3d856a1d9328e7023b18cc63af7f000000000000000000000000000000000000000000000000000000000000000083604051610da0929190610ff2565b60405180910390a15050565b80356001600160a01b0381168114610dc357600080fd5b919050565b600060208284031215610dda57600080fd5b610de382610dac565b9392505050565b60006020808385031215610dfd57600080fd5b823567ffffffffffffffff80821115610e1557600080fd5b818501915085601f830112610e2957600080fd5b813581811115610e3b57610e3b611186565b8060051b9150610e4c8483016110a9565b8181528481019084860184860187018a1015610e6757600080fd5b600095505b83861015610e9157610e7d81610dac565b835260019590950194918601918601610e6c565b5098975050505050505050565b600060208284031215610eb057600080fd5b81518015158114610de357600080fd5b600060208284031215610ed257600080fd5b815167ffffffffffffffff80821115610eea57600080fd5b818401915084601f830112610efe57600080fd5b815181811115610f1057610f10611186565b610f23601f8201601f19166020016110a9565b9150808252856020828501011115610f3a57600080fd5b610f4b8160208401602086016110f9565b50949350505050565b600060208284031215610f6657600080fd5b5051919050565b600060208284031215610f7f57600080fd5b815160ff81168114610de357600080fd5b664c4f434b45445f60c81b815260008251610fb28160078501602087016110f9565b9190910160070192915050565b6a02a34b6b2b637b1b5b2b2160ad1b815260008251610fe581600b8501602087016110f9565b91909101600b0192915050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b81811015611040578551851683529483019491830191600101611022565b509098975050505050505050565b602081016003831061107057634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526110958160408501602087016110f9565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156110d2576110d2611186565b604052919050565b60008160001904831182151516156110f4576110f4611144565b500290565b60005b838110156111145781810151838201526020016110fc565b83811115611123576000848401525b50505050565b600060001982141561113d5761113d611144565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c8d82f452f48f44091d1df6ce1e353b20a6c63e333c63b85559ef0db10a25a1b64736f6c63430008060033a2646970667358221220afb3c016ca683691f9d9444b9cf398a0bc5566f2cefcafbbdddad24a8446b41164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Factory contract that creates a timelock given global timelock parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}