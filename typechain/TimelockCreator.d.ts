/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TimelockCreatorInterface extends ethers.utils.Interface {
  functions: {
    "createTimelock(address,uint256,uint16,uint16)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createTimelock",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTimelock",
    data: BytesLike
  ): Result;

  events: {
    "CreatedTimelockContract(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedTimelockContract"): EventFragment;
}

export class TimelockCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimelockCreatorInterface;

  functions: {
    createTimelock(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createTimelock(address,uint256,uint16,uint16)"(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createTimelock(
    token: string,
    payoutAmount: BigNumberish,
    daysInFuture: BigNumberish,
    recoveryDaysAfterGrant: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createTimelock(address,uint256,uint16,uint16)"(
    token: string,
    payoutAmount: BigNumberish,
    daysInFuture: BigNumberish,
    recoveryDaysAfterGrant: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createTimelock(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createTimelock(address,uint256,uint16,uint16)"(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    CreatedTimelockContract(
      undefined: string | null,
      undefined: null
    ): EventFilter;
  };

  estimateGas: {
    createTimelock(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createTimelock(address,uint256,uint16,uint16)"(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createTimelock(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createTimelock(address,uint256,uint16,uint16)"(
      token: string,
      payoutAmount: BigNumberish,
      daysInFuture: BigNumberish,
      recoveryDaysAfterGrant: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
