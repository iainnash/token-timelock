/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TimelockInterface extends ethers.utils.Interface {
  functions: {
    "addGrants(address[])": FunctionFragment;
    "claim()": FunctionFragment;
    "grantStatus(address)": FunctionFragment;
    "recover(address)": FunctionFragment;
    "timeReceiveGrant()": FunctionFragment;
    "timeRecoverGrant()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGrants", values: [string[]]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "grantStatus", values: [string]): string;
  encodeFunctionData(functionFragment: "recover", values: [string]): string;
  encodeFunctionData(
    functionFragment: "timeReceiveGrant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeRecoverGrant",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addGrants", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeReceiveGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeRecoverGrant",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,address)": EventFragment;
    "Recovered(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
}

export class Timelock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimelockInterface;

  functions: {
    addGrants(
      newRecipients: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addGrants(address[])"(
      newRecipients: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    grantStatus(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "grantStatus(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    recover(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recover(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timeReceiveGrant(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "timeReceiveGrant()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    timeRecoverGrant(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "timeRecoverGrant()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  addGrants(
    newRecipients: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addGrants(address[])"(
    newRecipients: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  grantStatus(recipient: string, overrides?: CallOverrides): Promise<number>;

  "grantStatus(address)"(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<number>;

  recover(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recover(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timeReceiveGrant(overrides?: CallOverrides): Promise<BigNumber>;

  "timeReceiveGrant()"(overrides?: CallOverrides): Promise<BigNumber>;

  timeRecoverGrant(overrides?: CallOverrides): Promise<BigNumber>;

  "timeRecoverGrant()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addGrants(
      newRecipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addGrants(address[])"(
      newRecipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    grantStatus(recipient: string, overrides?: CallOverrides): Promise<number>;

    "grantStatus(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<number>;

    recover(recipient: string, overrides?: CallOverrides): Promise<void>;

    "recover(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timeReceiveGrant(overrides?: CallOverrides): Promise<BigNumber>;

    "timeReceiveGrant()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeRecoverGrant(overrides?: CallOverrides): Promise<BigNumber>;

    "timeRecoverGrant()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Claimed(actor: null, claimee: null): EventFilter;

    Recovered(sender: null, recipient: null): EventFilter;
  };

  estimateGas: {
    addGrants(
      newRecipients: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addGrants(address[])"(
      newRecipients: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    grantStatus(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "grantStatus(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recover(recipient: string, overrides?: Overrides): Promise<BigNumber>;

    "recover(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    timeReceiveGrant(overrides?: CallOverrides): Promise<BigNumber>;

    "timeReceiveGrant()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeRecoverGrant(overrides?: CallOverrides): Promise<BigNumber>;

    "timeRecoverGrant()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addGrants(
      newRecipients: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addGrants(address[])"(
      newRecipients: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    grantStatus(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "grantStatus(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recover(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recover(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timeReceiveGrant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeReceiveGrant()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeRecoverGrant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeRecoverGrant()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
